plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'com.github.node-gradle.node' version '7.0.1'
	id 'jacoco'
//	id "com.moowork.node" version "1.3.1"
}

group = 'com.idfc.bootcamp'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '3.2.0'
	implementation 'org.flywaydb:flyway-core'
    implementation 'org.projectlombok:lombok:1.18.30'
    runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.2'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
	implementation 'com.google.guava:guava:30.1.1-jre'
	implementation 'org.seleniumhq.selenium:selenium-java:4.8.1'
	implementation 'io.github.bonigarcia:webdrivermanager:5.3.0'
}

tasks.named('test') {
   useJUnitPlatform()
   systemProperties([
         // Configuration parameters to execute top-level classes in parallel but methods in same thread
         'junit.jupiter.execution.parallel.enabled': 'true',
         'junit.jupiter.execution.parallel.mode.default': 'same_thread',
         'junit.jupiter.execution.parallel.mode.classes.default': 'concurrent',
   ])
	finalizedBy jacocoTestReport
}

node {
	workDir = file("${project.projectDir}/src/main/frontend-ui/bookstoreapp/nodejs")
	npmWorkDir = file("${project.projectDir}/src/main/frontend-ui/bookstoreapp/npm")
}

task installFEDependencies(type: YarnTask){
	description = " read packge.json and install all jars"
	workingDir = file("${project.projectDir}/src/main/frontend-ui/bookstoreapp")
	args =["install"]
}

task buildFrontend(type: YarnTask, dependsOn: installFEDependencies){
	description = "Builds applciation for your frontend "
	workingDir = file("${project.projectDir}/src/main/frontend-ui/bookstoreapp")
	args =["build"]
}

task testFrontend(type: YarnTask, dependsOn: installFEDependencies){
	description = "Builds applciation for your frontend "
	workingDir = file("${project.projectDir}/src/main/frontend-ui/bookstoreapp")
	args =["test:coverage", "--watchAll=false"]
}

task copyFrontendFiles(type: Copy, dependsOn: [buildFrontend, resolveMainClassName]){
	from "${project.projectDir}/src/main/frontend-ui/bookstoreapp/build/"
	into "${project.projectDir}/build/resources/main/static"
}

jacocoTestCoverageVerification {
		violationRules {
		rule {
			limit {
				counter = 'LINE'
				minimum = 0.87
			}
			limit {
				counter = 'BRANCH'
				minimum = 0.8
			}
		}
	}
}
jacocoTestReport {
	reports {
		csv.required = true
	}
}
bootJar.dependsOn copyFrontendFiles
bootRun.dependsOn copyFrontendFiles

/*compileJava*/
