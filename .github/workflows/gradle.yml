# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Set up node 18.12.1
      uses: actions/setup-node@v4
      with:
        node-version: '18.12.1'
        cache: 'npm'
    - name: compile with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: compileJava
    - name: test
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: compileTestJava    
    - name: package
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: bootjar
    - name: upload artifact
      uses: actions/upload-artifact@v3
      with: 
        name: bookstore.jar
        path: build/libs/bookstore-0.0.1-SNAPSHOT.jar
    # - name: get semantic tag version and release notes from commit messages
    #   id: tag 
    #   run: |
    #     curtag=${GITHUB_REF_NAME}
    #     major_minor=$(echo "$curtag" | cut -d'.' -f1-2)
    #     patch=$(echo "$curtag" | cut -d'.' -f3)
    #     # avoid empty patch number
    #     [ -n "$patch" ] && ((patch--)) || patch=".x"
    #     prevtag="${major_minor}.${patch}"
    #     echo "" > body.log
    #     if git tag | grep $prevtag ; then
    #       git log -q ${curtag}...${prevtag} --pretty="- %s" -q --no-color >> body.log
    #     else
    #       git log --pretty="- %s" -q --no-color >> body.log
    #     fi
    #     line_count=$(cat body.log | wc -l)
    #     echo "curtag=$curtag" >> $GITHUB_OUTPUT
    #     echo "prevtag=$prevtag" >> $GITHUB_OUTPUT
    #     echo "line_count=$line_count" >> $GITHUB_OUTPUT     
    # - uses: ncipollo/release-action@v1
    #   with:
    #     name: ${GITHUB_REF_NAME}
    #     tag: ${GITHUB_REF_NAME}
    #     artifacts: "build/libs/bookstore*.jar"
    #     bodyFile: "body.log"
    #     token: ${{ secrets.GITHUB_TOKEN }}
